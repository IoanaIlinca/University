     1                                  bits 32
     2                                  
     3                                  global start
     4                                  ;ex28 from text file operations
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, scanf, fclose,fprintf,printf
     8                                  import printf msvcrt.dll
     9                                  import exit msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 6F757470757446696C-         file_name db "outputFile.txt", 0   ; filename to be read
    17 00000009 652E74787400       
    18 0000000F 7700                        access_mode db "w", 0       ; file access mode:
    19                                                                  
    20 00000011 FFFFFFFF                    file_descriptor dd -1       ; variable to hold the file descriptor
    21 00000015 <res 00000064>              A resb 100
    22 00000079 257300                      format db '%s',0
    23 0000007C 25732000                    Outformat db '%s ',0
    24 00000080 496E74726F64756365-         message db 'Introduce word:',0
    24 00000089 20776F72643A00     
    25 00000090 <res 00000001>              letter resb 1
    26 00000091 00                          ok db 0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; call fopen() to create the file
    31                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    32                                          ; eax = fopen(file_name, access_mode)
    33 00000000 68[0F000000]                    push dword access_mode     
    34 00000005 68[00000000]                    push dword file_name
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp, 4 * 2                ; clean-up the stack
    37                                  
    38 00000013 A3[11000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    39                                  
    40                                          ; check if fopen() has successfully created the file (EAX != 0)
    41 00000018 83F800                          cmp eax, 0
    42 0000001B 7471                            je .end
    43                                          .read:
    44 0000001D 68[80000000]                    push dword message
    45 00000022 FF15[00000000]                  call [printf]
    46 00000028 83C404                          add esp, 4 * 1
    47 0000002B 68[15000000]                    push dword A       ; adress of A
    48 00000030 68[79000000]                    push dword format
    49 00000035 FF15[00000000]                  call [scanf]       ; call function scanf for reading
    50 0000003B 83C408                          add esp, 4 * 2
    51                                          
    52 0000003E B900000000                      mov ecx, 0
    53 00000043 C605[91000000]00                mov byte [ok], 0 ; ok becomes 1 if the word contains a lowercaseletter
    54                                          .loop:
    55                                              
    56 0000004A 8A81[15000000]                      mov al, [A + ecx]
    57 00000050 3C00                                cmp al, 0
    58 00000052 7416                                je .endloop
    59 00000054 3C24                                cmp al, '$' ;we read a $ character so we stop reading
    60 00000056 7436                                je .end
    61 00000058 3C61                                cmp al, 'a'
    62 0000005A 720B                                jb .skip ;al < 'a'
    63 0000005C 3C7A                                cmp al,'z'
    64 0000005E 7707                                ja .skip ; al > 'z'
    65 00000060 C605[91000000]01                    mov byte[ok], 1
    66                                              .skip:
    67 00000067 41                                  inc ecx
    68 00000068 EBE0                                jmp .loop
    69                                          
    70                                          .endloop:
    71 0000006A 803D[91000000]00                cmp byte[ok], 0
    72 00000071 74AA                            je .read
    73 00000073 68[15000000]                    push dword A
    74 00000078 68[7C000000]                    push Outformat
    75 0000007D FF35[11000000]                  push dword [file_descriptor]
    76 00000083 FF15[00000000]                  call [fprintf]
    77 00000089 83C40C                          add esp, 4 * 3
    78 0000008C EB8F                            jmp .read
    79                                          
    80                                          .end:
    81                                          
    82                                          ; call fclose() to close the file
    83                                          ; fclose(file_descriptor)
    84 0000008E FF35[11000000]                  push dword [file_descriptor]
    85 00000094 FF15[00000000]                  call [fclose]
    86 0000009A 83C404                          add esp, 4
    87                                          ; exit(0)
    88 0000009D 6A00                            push dword 0
    89 0000009F FF15[00000000]                  call [exit]
